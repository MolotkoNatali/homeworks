{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-19T16:31:58.700Z",
    "end": "2025-04-19T16:32:07.521Z",
    "duration": 8821,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a67ff02d-e4da-4893-ab4d-c88fc0e257f2",
      "title": "",
      "fullFile": "C:\\Users\\user\\Desktop\\sources\\Homework\\homework_api_frame_14\\tests\\jokes-api-service.spec.ts",
      "file": "\\tests\\jokes-api-service.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e35fc7b1-e143-41b1-b8f0-9665d87e277e",
          "title": "Jokes API Service tests",
          "fullFile": "C:\\Users\\user\\Desktop\\sources\\Homework\\homework_api_frame_14\\tests\\jokes-api-service.spec.ts",
          "file": "\\tests\\jokes-api-service.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Jokes API Service tests\"",
              "fullTitle": "Jokes API Service tests \"before all\" hook in \"Jokes API Service tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "jokesApiService=new import_jokes_api_service.JokesApiService",
              "err": {},
              "uuid": "c0ced7fb-bc13-4da1-a8d9-6d43d8d008c4",
              "parentUUID": "e35fc7b1-e143-41b1-b8f0-9665d87e277e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should fetch a random joke and verify it contains the required properties",
              "fullTitle": "Jokes API Service tests should fetch a random joke and verify it contains the required properties",
              "timedOut": false,
              "duration": 797,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const randomJoke=await jokesApiService.getRandomJoke();(0,import_chai.expect)(randomJoke).to.have.property(\"id\");(0,import_chai.expect)(randomJoke).to.have.property(\"type\");(0,import_chai.expect)(randomJoke).to.have.property(\"setup\");(0,import_chai.expect)(randomJoke).to.have.property(\"punchline\");context.jokeId=randomJoke.id",
              "err": {},
              "uuid": "864d1c3b-5be4-467f-9cd2-d27f9769faaf",
              "parentUUID": "e35fc7b1-e143-41b1-b8f0-9665d87e277e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch multiple random joke objects and verify their properties",
              "fullTitle": "Jokes API Service tests should fetch multiple random joke objects and verify their properties",
              "timedOut": false,
              "duration": 5266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const randomJokes=await jokesApiService.getRandomJokes(5);(0,import_chai.expect)(randomJokes).to.be.an(\"array\");(0,import_chai.expect)(randomJokes.length).to.equal(5);randomJokes.forEach(joke=>{(0,import_chai.expect)(joke).to.have.property(\"id\");(0,import_chai.expect)(joke).to.have.property(\"type\")})",
              "err": {},
              "uuid": "43263719-b91c-4745-b995-4fdfca858d6b",
              "parentUUID": "e35fc7b1-e143-41b1-b8f0-9665d87e277e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch a joke by its ID and verify its properties",
              "fullTitle": "Jokes API Service tests should fetch a joke by its ID and verify its properties",
              "timedOut": false,
              "duration": 281,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const jokeId=context.jokeId;const jokeById=await jokesApiService.getJokeById(jokeId);(0,import_chai.expect)(jokeById).to.have.property(\"id\").that.equals(jokeId);(0,import_chai.expect)(jokeById).to.have.property(\"type\");(0,import_chai.expect)(jokeById).to.have.property(\"setup\");(0,import_chai.expect)(jokeById).to.have.property(\"punchline\")",
              "err": {},
              "uuid": "22d131ef-8b76-4c7c-90b0-0cf5d63ff6e6",
              "parentUUID": "e35fc7b1-e143-41b1-b8f0-9665d87e277e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch all available joke types and verify their structure",
              "fullTitle": "Jokes API Service tests should fetch all available joke types and verify their structure",
              "timedOut": false,
              "duration": 1236,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const jokeTypes=await jokesApiService.getJokeTypes();(0,import_chai.expect)(jokeTypes).to.be.an(\"array\");(0,import_chai.expect)(jokeTypes.length).to.be.greaterThan(0);(0,import_chai.expect)(jokeTypes).to.include(\"general\")",
              "err": {},
              "uuid": "57dbbc76-0f7e-45d5-9c3e-a71c035b515c",
              "parentUUID": "e35fc7b1-e143-41b1-b8f0-9665d87e277e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fetch a random joke and verify it contains the required properties",
              "fullTitle": "Jokes API Service tests should fetch a random joke and verify it contains the required properties",
              "timedOut": false,
              "duration": 1228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const randomJoke=await jokesApiService.getRandomJoke();(0,import_chai.expect)(randomJoke).to.have.property(\"setup\");(0,import_chai.expect)(randomJoke).to.have.property(\"punchline\");(0,import_chai.expect)(randomJoke).to.have.property(\"type\")",
              "err": {},
              "uuid": "ce417fad-9d98-497d-8e76-eb9674af929a",
              "parentUUID": "e35fc7b1-e143-41b1-b8f0-9665d87e277e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "864d1c3b-5be4-467f-9cd2-d27f9769faaf",
            "43263719-b91c-4745-b995-4fdfca858d6b",
            "22d131ef-8b76-4c7c-90b0-0cf5d63ff6e6",
            "57dbbc76-0f7e-45d5-9c3e-a71c035b515c",
            "ce417fad-9d98-497d-8e76-eb9674af929a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8808,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 120000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}