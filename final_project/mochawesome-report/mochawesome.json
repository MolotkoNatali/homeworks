{
  "stats": {
    "suites": 2,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-19T20:10:25.198Z",
    "end": "2025-04-19T20:10:29.249Z",
    "duration": 4051,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4e79e688-b612-457e-bfd4-0daf6dd4a62f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0c8adbb0-fc4b-4d79-816b-d58b00d2f8b6",
          "title": "Contract Test: Notes API",
          "fullFile": "C:\\Users\\user\\Desktop\\sources\\Homework\\final_project\\tests\\contracts\\notes-contracts.spec.ts",
          "file": "\\tests\\contracts\\notes-contracts.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Contract Test: Notes API\"",
              "fullTitle": "Contract Test: Notes API \"before all\" hook in \"Contract Test: Notes API\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "notesService=new import_notes_api_service.NotesApiService",
              "err": {},
              "uuid": "c4ce305a-1199-4d10-b247-ed14b089c8a4",
              "parentUUID": "0c8adbb0-fc4b-4d79-816b-d58b00d2f8b6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a note with required properties",
              "fullTitle": "Contract Test: Notes API should create a note with required properties",
              "timedOut": false,
              "duration": 880,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newNote={title:\"Test Note\",description:\"This is test content\",category:\"Work\"};const createdNote=await notesService.createNote(newNote);(0,import_chai.expect)(createdNote).to.have.property(\"id\");(0,import_chai.expect)(createdNote).to.have.property(\"title\").that.equals(newNote.title);(0,import_chai.expect)(createdNote).to.have.property(\"description\").that.equals(newNote.description);(0,import_chai.expect)(createdNote).to.have.property(\"category\").that.equals(newNote.category);(0,import_chai.expect)(createdNote).to.have.property(\"completed\").that.is.a(\"boolean\");(0,import_chai.expect)(createdNote).to.have.property(\"created_at\").that.is.a(\"string\");(0,import_chai.expect)(createdNote).to.have.property(\"updated_at\").that.is.a(\"string\")",
              "err": {},
              "uuid": "ef8726f7-0f6a-4f80-afd1-76501a96ee26",
              "parentUUID": "0c8adbb0-fc4b-4d79-816b-d58b00d2f8b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a note by its ID with valid properties",
              "fullTitle": "Contract Test: Notes API should retrieve a note by its ID with valid properties",
              "timedOut": false,
              "duration": 782,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newNote={title:\"Test Note\",description:\"This is test content\",category:\"Work\"};const createdNote=await notesService.createNote(newNote);const noteId=createdNote.id;const retrievedNote=await notesService.getNoteById(noteId);(0,import_chai.expect)(retrievedNote).to.have.property(\"id\").that.equals(noteId);(0,import_chai.expect)(retrievedNote).to.have.property(\"title\").that.equals(newNote.title);(0,import_chai.expect)(retrievedNote).to.have.property(\"description\").that.equals(newNote.description);(0,import_chai.expect)(retrievedNote).to.have.property(\"category\").that.equals(newNote.category);(0,import_chai.expect)(retrievedNote).to.have.property(\"completed\").that.is.a(\"boolean\");(0,import_chai.expect)(retrievedNote).to.have.property(\"created_at\").that.is.a(\"string\");(0,import_chai.expect)(retrievedNote).to.have.property(\"updated_at\").that.is.a(\"string\")",
              "err": {},
              "uuid": "0a5fb4b8-6bdf-41bc-959d-378acbb2dd52",
              "parentUUID": "0c8adbb0-fc4b-4d79-816b-d58b00d2f8b6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve all notes with valid properties",
              "fullTitle": "Contract Test: Notes API should retrieve all notes with valid properties",
              "timedOut": false,
              "duration": 372,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const notes=await notesService.getAllNotes();notes.forEach(note=>{(0,import_chai.expect)(note).to.have.property(\"id\").that.is.a(\"string\");(0,import_chai.expect)(note).to.have.property(\"title\").that.is.a(\"string\");(0,import_chai.expect)(note).to.have.property(\"description\").that.is.a(\"string\");(0,import_chai.expect)(note).to.have.property(\"category\").that.is.a(\"string\");(0,import_chai.expect)(note).to.have.property(\"completed\").that.is.a(\"boolean\");(0,import_chai.expect)(note).to.have.property(\"created_at\").that.is.a(\"string\");(0,import_chai.expect)(note).to.have.property(\"updated_at\").that.is.a(\"string\")});(0,import_chai.expect)(notes).to.be.an(\"array\");(0,import_chai.expect)(notes.length).to.be.greaterThan(0)",
              "err": {},
              "uuid": "1900c868-8d05-46ba-950f-219c5d5a8e51",
              "parentUUID": "0c8adbb0-fc4b-4d79-816b-d58b00d2f8b6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef8726f7-0f6a-4f80-afd1-76501a96ee26",
            "0a5fb4b8-6bdf-41bc-959d-378acbb2dd52",
            "1900c868-8d05-46ba-950f-219c5d5a8e51"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2034,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        },
        {
          "uuid": "3fa4ba21-4173-4529-bd71-e5e3ca442702",
          "title": "Notes API Service tests",
          "fullFile": "C:\\Users\\user\\Desktop\\sources\\Homework\\final_project\\tests\\api\\notes-api-service.spec.ts",
          "file": "\\tests\\api\\notes-api-service.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new note",
              "fullTitle": "Notes API Service tests should create a new note",
              "timedOut": false,
              "duration": 303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newNote={title:\"Test Note\",description:\"This is test content\",category:\"Work\"};const created=await notesService.createNote(newNote);(0,import_chai.expect)(created).to.include(newNote);(0,import_chai.expect)(created).to.have.property(\"id\");context.noteId=created.id",
              "err": {},
              "uuid": "9a1e0134-4d6b-4136-b1c7-8375a9fc867f",
              "parentUUID": "3fa4ba21-4173-4529-bd71-e5e3ca442702",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get the created note by ID",
              "fullTitle": "Notes API Service tests should get the created note by ID",
              "timedOut": false,
              "duration": 263,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id=context.noteId;if(!id)throw new Error(\"noteId is undefined\");const note=await notesService.getNoteById(id);(0,import_chai.expect)(note).to.have.property(\"id\",id)",
              "err": {},
              "uuid": "12727931-24c4-4ab5-8d8d-24682c717126",
              "parentUUID": "3fa4ba21-4173-4529-bd71-e5e3ca442702",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all notes",
              "fullTitle": "Notes API Service tests should get all notes",
              "timedOut": false,
              "duration": 393,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const notes=await notesService.getAllNotes();(0,import_chai.expect)(notes).to.be.an(\"array\");(0,import_chai.expect)(notes.length).to.be.greaterThan(0)",
              "err": {},
              "uuid": "d59f7429-b509-48ba-a273-0e1f4fcc0c8f",
              "parentUUID": "3fa4ba21-4173-4529-bd71-e5e3ca442702",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a note",
              "fullTitle": "Notes API Service tests should update a note",
              "timedOut": false,
              "duration": 410,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if(!context.noteId){throw new Error(\"Note ID is undefined\")}const updatedNote={title:\"Updated Title\",description:\"Updated content\",category:\"Work\",completed:false};try{const updated=await notesService.updateNote(context.noteId,updatedNote);(0,import_chai.expect)(updated).to.include(updatedNote);(0,import_chai.expect)(updated).to.have.property(\"id\").that.equals(context.noteId);(0,import_chai.expect)(updated.title).to.equal(updatedNote.title);(0,import_chai.expect)(updated.description).to.equal(updatedNote.description);(0,import_chai.expect)(updated.category).to.equal(updatedNote.category);(0,import_chai.expect)(updated.completed).to.equal(updatedNote.completed)}catch(error){if(error instanceof import_axios.AxiosError){throw error}else{throw error}}",
              "err": {},
              "uuid": "c4916094-13c0-48f5-9fa8-fdb65736e8c2",
              "parentUUID": "3fa4ba21-4173-4529-bd71-e5e3ca442702",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete the note",
              "fullTitle": "Notes API Service tests should delete the note",
              "timedOut": false,
              "duration": 620,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id=context.noteId;if(!id)throw new Error(\"noteId is undefined\");await notesService.deleteNote(id);try{await notesService.getNoteById(id);throw new Error(\"Note still exists after deletion\")}catch(err){const error=err;(0,import_chai.expect)(error.response?.status).to.equal(404)}",
              "err": {},
              "uuid": "08337881-dbbf-4517-a837-1b041096d831",
              "parentUUID": "3fa4ba21-4173-4529-bd71-e5e3ca442702",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a1e0134-4d6b-4136-b1c7-8375a9fc867f",
            "12727931-24c4-4ab5-8d8d-24682c717126",
            "d59f7429-b509-48ba-a273-0e1f4fcc0c8f",
            "c4916094-13c0-48f5-9fa8-fdb65736e8c2",
            "08337881-dbbf-4517-a837-1b041096d831"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1989,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 120000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}