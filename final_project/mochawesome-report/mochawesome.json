{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 0,
    "pending": 0,
    "failures": 5,
    "start": "2025-04-18T21:17:33.406Z",
    "end": "2025-04-18T21:17:35.769Z",
    "duration": 2363,
    "testsRegistered": 5,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bc3e71d2-9cac-4b2c-a92c-ea8612701983",
      "title": "",
      "fullFile": "C:\\Users\\user\\Desktop\\sources\\Homework\\final_project\\tests\\api\\notes-api-service.spec.ts",
      "file": "\\tests\\api\\notes-api-service.spec.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7371a2f0-395d-411c-ba5b-433f57d141c7",
          "title": "Notes API Service tests",
          "fullFile": "C:\\Users\\user\\Desktop\\sources\\Homework\\final_project\\tests\\api\\notes-api-service.spec.ts",
          "file": "\\tests\\api\\notes-api-service.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new note",
              "fullTitle": "Notes API Service tests should create a new note",
              "timedOut": false,
              "duration": 294,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newNote={title:\"Test Note\",content:\"This is test content\"};const created=await notesService.createNote(newNote);(0,import_chai.expect)(created).to.include(newNote);(0,import_chai.expect)(created).to.have.property(\"id\");context.noteId=created.id",
              "err": {
                "message": "AxiosError: Request failed with status code 401",
                "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at BrotliDecompress.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at BrotliDecompress.emit (node:events:530:35)\n    at BrotliDecompress.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async NotesApiService.createNote (src\\services\\notes-api-service.ts:2:1537)\n    at async Context.<anonymous> (tests\\api\\notes-api-service.spec.ts:2:519)",
                "diff": null
              },
              "uuid": "f113a8ef-c3b5-4aa5-8fac-229c1270b2dc",
              "parentUUID": "7371a2f0-395d-411c-ba5b-433f57d141c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get the created note by ID",
              "fullTitle": "Notes API Service tests should get the created note by ID",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const id=context.noteId;if(!id)throw new Error(\"noteId is undefined\");const note=await notesService.getNoteById(id);(0,import_chai.expect)(note).to.have.property(\"id\",id)",
              "err": {
                "message": "Error: noteId is undefined",
                "estack": "Error: noteId is undefined\n    at Context.<anonymous> (tests\\api\\notes-api-service.spec.ts:2:796)\n    at processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "14d6f8cb-8f60-4571-b067-0a427831f860",
              "parentUUID": "7371a2f0-395d-411c-ba5b-433f57d141c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get all notes",
              "fullTitle": "Notes API Service tests should get all notes",
              "timedOut": false,
              "duration": 189,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const notes=await notesService.getAllNotes();(0,import_chai.expect)(notes).to.be.an(\"array\");(0,import_chai.expect)(notes.length).to.be.greaterThan(0)",
              "err": {
                "message": "AxiosError: Request failed with status code 401",
                "estack": "AxiosError: Request failed with status code 401\n    at settle (node_modules\\axios\\lib\\core\\settle.js:19:12)\n    at BrotliDecompress.handleStreamEnd (node_modules\\axios\\lib\\adapters\\http.js:599:11)\n    at BrotliDecompress.emit (node:events:530:35)\n    at BrotliDecompress.emit (node:domain:489:12)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:90:21)\n    at Axios.request (node_modules\\axios\\lib\\core\\Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async NotesApiService.getAllNotes (src\\services\\notes-api-service.ts:2:1432)\n    at async Context.<anonymous> (tests\\api\\notes-api-service.spec.ts:2:997)",
                "diff": null
              },
              "uuid": "3b83ba91-954f-4cea-a639-099fe5c23351",
              "parentUUID": "7371a2f0-395d-411c-ba5b-433f57d141c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a note",
              "fullTitle": "Notes API Service tests should update a note",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const id=context.noteId;if(!id)throw new Error(\"noteId is undefined\");const updated=await notesService.updateNote(id,{title:\"Updated Title\"});(0,import_chai.expect)(updated).to.have.property(\"title\",\"Updated Title\")",
              "err": {
                "message": "Error: noteId is undefined",
                "estack": "Error: noteId is undefined\n    at Context.<anonymous> (tests\\api\\notes-api-service.spec.ts:2:1228)\n    at processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "7151d7f5-4346-4844-9fcd-91cbfeb64974",
              "parentUUID": "7371a2f0-395d-411c-ba5b-433f57d141c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete the note",
              "fullTitle": "Notes API Service tests should delete the note",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const id=context.noteId;if(!id)throw new Error(\"noteId is undefined\");await notesService.deleteNote(id);try{await notesService.getNoteById(id);throw new Error(\"Note still exists after deletion\")}catch(err){const error=err;(0,import_chai.expect)(error.response?.status).to.equal(404)}",
              "err": {
                "message": "Error: noteId is undefined",
                "estack": "Error: noteId is undefined\n    at Context.<anonymous> (tests\\api\\notes-api-service.spec.ts:2:1501)\n    at processImmediate (node:internal/timers:491:21)",
                "diff": null
              },
              "uuid": "fd1edc93-89ce-45fa-8df5-fd0fc57a63c1",
              "parentUUID": "7371a2f0-395d-411c-ba5b-433f57d141c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f113a8ef-c3b5-4aa5-8fac-229c1270b2dc",
            "14d6f8cb-8f60-4571-b067-0a427831f860",
            "3b83ba91-954f-4cea-a639-099fe5c23351",
            "7151d7f5-4346-4844-9fcd-91cbfeb64974",
            "fd1edc93-89ce-45fa-8df5-fd0fc57a63c1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 484,
          "root": false,
          "rootEmpty": false,
          "_timeout": 120000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 120000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}